"""
Module responsible for content and display of the "–ü—Ä–æ–≥–Ω–æ–∑—ã" tab in streamlit application
"""

from imports import st, pd, choice, confusion_matrix
from imports import y_test, models_params, df
from scripts import get_metrics_score, update_threshold, update_model_name, get_user_params_dict, get_thresh_preds, \
    write_single_dict_to_db, get_prediction, erase_singl_df


def draw_model_select() -> None:
    """
    Responsible for displaying the predictive model selection box
    """
    st.divider()
    st.info('–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏: –≤—ã—è–≤–∏—Ç—å –¥–ª—è –ë–∞–Ω–∫–∞-–∑–∞–∫–∞–∑—á–∏–∫–∞ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –µ–≥–æ '
            '–±—É–¥—É—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –î–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é.')
    st.caption('–í–æ–∑–º–æ–∂–Ω–æ–π —Ü–µ–ª—å—é —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏ —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—á–Ω—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –æ –Ω–æ–≤–æ–º '
               '–ø—Ä–æ–¥—É–∫—Ç–µ –ë–∞–Ω–∫–∞')
    st.divider()
    st.subheader('üîé –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏')
    st.info('–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω—É—é –º–æ–¥–µ–ª—å (–æ–Ω–∏ –∏–º–µ—é—Ç —Ä–∞–∑–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –¥–∞—é—Ç —Ä–∞–∑–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑)')
    model_name = st.radio(
        "",
        [name.title() for name in models_params],
        captions=[(models_params[name]['name'] + ': ' + models_params[name]['params']) for name in models_params],
        horizontal=True
    )
    model_type = models_params[model_name.lower()]['type']
    update_model_name(model_type)


def draw_thrash_select() -> None:
    """
    Responsible for displaying items by selecting a probability threshold
    """
    user_params_dict = get_user_params_dict()
    best_thr = user_params_dict['best_thr']
    st.divider()
    st.subheader('üéöÔ∏è –í—ã–±–æ—Ä –ø–æ—Ä–æ–≥–∞')
    st.info('–ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≤–ª–∏—è–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤')
    st.write('')
    thr_prob = st.slider('–í—ã–±–µ—Ä–∏ –ø–æ—Ä–æ–≥ (—à–∫–∞–ª–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞, –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ '
                         '–æ—Ç 0 –¥–æ 1):', min_value=0, max_value=100, value=50, step=1)
    thr = round((thr_prob / 100), 2)
    update_threshold(thr)
    st.write(
        "–ú—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–Ω–æ–π "
        "–ø–æ–ª–Ω–æ—Ç—ã –æ—Ö–≤–∞—Ç–∞, –æ–Ω —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç",
        best_thr)
    st.write("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ—Ä–æ–≥", thr)


def draw_metrics() -> None:
    """
    Responsible for displaying the calculated quality metrics and comparing them to a benchmark
    """
    st.divider()
    st.subheader('‚õ≥ –í–ª–∏—è–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –Ω–∞ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞')
    st.info(
        f'–ü–æ—Å–º–æ—Ç—Ä–∏–º –∫–∞–∫ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –∫–∞—á–µ—Å—Ç–≤–æ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞–º–∏ –ø–æ—Ä–æ–≥–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º —Ä–µ—à–µ–Ω–∏–µ–º:')
    metrics = get_metrics_score()
    col1, col2, col3, col4 = st.columns(4)
    mets_name = list(metrics['user'].keys())
    pairs = zip(mets_name, [col1, col2, col3, col4])

    for mets, col in pairs:
        col.metric(mets, metrics['user'][mets], round((metrics['user'][mets] - metrics['best'][mets]), 4))
    st.caption(
        '–ù–æ —á—Ç–æ –∑–Ω–∞—á–∞—Ç —ç—Ç–∏ —Ü–∏—Ñ—Ä—ã –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ?')


def draw_confusion_matrix() -> None:
    """
    Responsible for building the confusion matrix based on user and reference thresholds
    """
    y_thr_tuple = get_thresh_preds()

    st.divider()
    st.subheader('ü´∞ –í–ª–∏—è–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –Ω–∞ –∑–∞—Ç—Ä–∞—Ç—ã –ë–∞–Ω–∫–∞')
    st.info('–ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≤–ª–∏—è–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏')

    col1, col2 = st.columns(2)
    pairs = zip([0, 1], ['—Ç–æ–±–æ–π', '–Ω–∞–º–∏'], [col1, col2])

    for thr_num, me, col in pairs:
        matrix = pd.DataFrame(confusion_matrix(y_test, y_thr_tuple[thr_num]))
        st.write(f'–≠—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–æ–±—Ä–∞–Ω–Ω–æ–≥–æ {me} –ø–æ—Ä–æ–≥–∞:')
        st.dataframe(matrix.style.background_gradient(cmap='YlGnBu', axis=None))
        st.write(f'–ó–¥–µ—Å—å —É–¥–∞—Å—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è {matrix[1][1]} –∫–ª–∏–µ–Ω—Ç–∞–º, –Ω–æ –º—ã –Ω–µ —Å–¥–µ–ª–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ '
                 f'–∑–≤–æ–Ω–∫–∏ {matrix[0][1]} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º')
    matrix_user = confusion_matrix(y_test, y_thr_tuple[0])[1][1] + confusion_matrix(y_test, y_thr_tuple[0])[0][1]
    matrix_tuned = confusion_matrix(y_test, y_thr_tuple[1])[1][1] + confusion_matrix(y_test, y_thr_tuple[1])[0][1]
    delta = round(matrix_tuned / matrix_user, 1)
    st.write(f'–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ —Ç–æ–Ω–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–∞ –∏–º–µ–µ—Ç —Å–≤–æ—é –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—É—é —Ü–µ–Ω—É: –Ω–∞–º –ø—Ä–∏–¥—ë—Ç—Å—è '
             f'–∑–∞—Å—Ç–∞–≤–∏—Ç—å –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä –ë–∞–Ω–∫–∞ –æ–±–∑–≤–∞–Ω–∏–≤–∞—Ç—å –≤ {delta} —Ä–∞–∑ –±–æ–ª—å—à–µ –∫–ª–∏–µ–Ω—Ç–æ–≤. –ü–æ—ç—Ç–æ–º—É –ø—Ä–∏–¥—ë—Ç—Å—è —Å—á–∏—Ç–∞—Ç—å, '
             f'—á—Ç–æ –≤—ã–≥–æ–¥–Ω–µ–µ: —É–ø—É—Å—Ç–∏—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –Ω–µ–¥–æ–ø–æ–ª—É—á–∏—Ç—å –¥–æ—Ö–æ–¥, –∏–ª–∏ –Ω–∞—Ä–∞—Å—Ç–∏—Ç—å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —Å—á–µ—Ç '
             f'—É–≤–µ–ª–∏—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä—É')


def draw_forecast() -> None:
    """
    Calculates predictions for a randomly selected random user and displays them
    """

    single_pred, is_recommend_thr, is_recommend_best_thr = get_prediction()
    erase_singl_df()

    st.write('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –º–æ–¥–µ–ª–∏:', round(single_pred, 2))
    text_best_thr = '–¶–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç—å –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞:'
    text_thr = '–¶–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç—å –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–±–æ–π –ø–æ—Ä–æ–≥–∞:'

    if is_recommend_thr:
        st.write(text_thr, ':green[–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å]')
    else:
        st.write(text_thr, ':red[–Ω–µ —Ç—Ä–∞—Ç—å –≤—Ä–µ–º—è]')

    if is_recommend_best_thr:
        st.write(text_best_thr, ':green[–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å]')
    else:
        st.write(text_best_thr, ':red[–Ω–µ —Ç—Ä–∞—Ç—å –≤—Ä–µ–º—è]')


def draw_choise_df() -> None:
    """
    Provides selection and display of data from a random user of the Bank
    """
    st.divider()
    st.subheader('1Ô∏è‚É£ –í–ª–∏—è–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –Ω–∞ –µ–¥–∏–Ω–∏—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑')

    X = df.drop(columns=['TARGET', 'AGREEMENT_RK']).reset_index(drop=True).set_index('ID')
    st.info('–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏ –≤—ã–±–µ—Ä–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞, –∏–∑—É—á–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã')
    result = st.button('–ñ–º–∏')
    if result:
        ind = choice(X.index.tolist())
        single_df_regular = X.loc[ind].to_frame().T
    else:
        single_df_regular = X.iloc[0].to_frame().T
    # draw the resulting dataframe in the application
    st.dataframe(single_df_regular)

    # transforming df into dict to write into temporary db
    temp_single_df = single_df_regular.iloc[0].to_frame().T
    temp_single_df.index.rename('ID', inplace=True)
    single_df_dict = temp_single_df.reset_index().to_dict(orient='records')[0]
    write_single_dict_to_db(single_df_dict)

    # calculate forecasts based on temp records in the database and draw them in the application
    draw_forecast()


def collect_dataframe() -> pd.DataFrame:
    """
    Provides input of user questionnaire data to build a customized forecast and turns it into a dataframe
    """
    with st.expander('–†–∞–∑–≤–µ—Ä–Ω–∏ –∫–∞—Ç –¥–ª—è –≤–≤–æ–¥–∞ –∞–Ω–∫–µ—Ç—ã'):
        st.subheader('–û–±—â–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:')
        GENDER = st.radio("–ü–æ–ª", ("–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"), horizontal=True)
        AGE = st.slider("–í–æ–∑—Ä–∞—Å—Ç", min_value=1, max_value=80, value=39, step=1)
        FACT_ADDRESS_PROVINCE = st.selectbox("–†–µ–≥–∏–æ–Ω –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è", tuple(df.FACT_ADDRESS_PROVINCE.unique().tolist()))
        EDUCATION = st.radio("–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", tuple(df.EDUCATION.unique().tolist()), horizontal=True)
        SOCSTATUS_WORK_FL = st.radio("–ù–∞–ª–∏—á–∏–µ —Ä–∞–±–æ—Ç—ã", ("–ï—Å—Ç—å", "–ù–µ—Ç"), horizontal=True)
        SOCSTATUS_PENS_FL = st.radio("–ù–∞–ª–∏—á–∏–µ –ø–µ–Ω—Å–∏–∏", ("–ï—Å—Ç—å", "–ù–µ—Ç"), horizontal=True)

        st.divider()
        st.subheader('–°–≤–µ–¥–µ–Ω–∏—è –æ —Å–µ–º—å–µ:')
        MARITAL_STATUS = st.radio("–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ:", tuple(df.MARITAL_STATUS.unique().tolist()), horizontal=True)
        CHILD_TOTAL = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π", min_value=0, max_value=10, value=2, step=1)
        DEPENDANTS = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∂–¥–∏–≤–µ–Ω—Ü–µ–≤", min_value=0, max_value=10, value=1, step=1)

        st.divider()
        st.subheader('–°–≤–µ–¥–µ–Ω–∏—è –æ —Ä–∞–±–æ—Ç–µ:')
        GEN_INDUSTRY = st.selectbox("–û—Ç—Ä–∞—Å–ª—å", tuple(df.GEN_INDUSTRY.unique().tolist()))
        JOB_DIR = st.selectbox("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã", tuple(df.JOB_DIR.unique().tolist()))
        GEN_TITLE = st.selectbox("–î–æ–ª–∂–Ω–æ—Å—Ç—å", tuple(df.GEN_TITLE.unique().tolist()))
        WORK_TIME = st.number_input("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, –º–µ—Å", value=36)

        st.divider()
        st.subheader('–°–≤–µ–¥–µ–Ω–∏—è –æ –¥–æ—Ö–æ–¥–∞—Ö:')
        PERSONAL_INCOME = st.slider("–õ–∏—á–Ω—ã–π –¥–æ—Ö–æ–¥", min_value=0, max_value=300_000, value=15_000, step=1)
        FAMILY_INCOME = st.radio("–î–æ—Ö–æ–¥ —Å–µ–º—å–∏", tuple(df.FAMILY_INCOME.unique().tolist()), horizontal=True)
        FL_PRESENCE_FL = st.radio("–ù–∞–ª–∏—á–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã", ("–ï—Å—Ç—å", "–ù–µ—Ç"), horizontal=True)
        OWN_AUTO = st.radio("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ —Å–µ–º—å–µ", tuple(df.OWN_AUTO.unique().tolist()), horizontal=True)

        st.divider()
        st.subheader('–°–≤–µ–¥–µ–Ω–∏—è –æ –∫—Ä–µ–¥–∏—Ç–µ:')
        CREDIT = st.slider("–†–∞–∑–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞", min_value=1_000, max_value=100_000, value=15_000, step=1)
        TERM = st.slider("–°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞, –º–µ—Å", min_value=1, max_value=36, value=8, step=1)
        FST_PAYMENT = st.slider("–†–∞–∑–º–µ—Ä –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤–∑–Ω–æ—Å–∞, –≤ % –æ—Ç —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞", min_value=1, max_value=100,
                                value=23, step=1) * CREDIT / 100

    translatetion = {
        "–ú—É–∂—Å–∫–æ–π": 1,
        "–ñ–µ–Ω—Å–∫–∏–π": 0,
        "–ï—Å—Ç—å": 1,
        '–ù–µ—Ç': 0,
    }

    custom_dict = {
        "AGE": AGE,
        "GENDER": translatetion[GENDER],
        "EDUCATION": EDUCATION,
        "MARITAL_STATUS": MARITAL_STATUS,
        "CHILD_TOTAL": CHILD_TOTAL,
        "DEPENDANTS": DEPENDANTS,
        "SOCSTATUS_WORK_FL": translatetion[SOCSTATUS_WORK_FL],
        "SOCSTATUS_PENS_FL": translatetion[SOCSTATUS_PENS_FL],
        "FACT_ADDRESS_PROVINCE": FACT_ADDRESS_PROVINCE,
        "FL_PRESENCE_FL": translatetion[FL_PRESENCE_FL],
        "OWN_AUTO": OWN_AUTO,
        "CREDIT": CREDIT,
        "TERM": TERM,
        "FST_PAYMENT": FST_PAYMENT,
        "GEN_INDUSTRY": GEN_INDUSTRY,
        "GEN_TITLE": GEN_TITLE,
        "JOB_DIR": JOB_DIR,
        "WORK_TIME": WORK_TIME,
        "FAMILY_INCOME": FAMILY_INCOME,
        "PERSONAL_INCOME": PERSONAL_INCOME,
    }
    # build a dataframe from the dictionary to display in the application
    result_df = pd.DataFrame(custom_dict, index=[0])

    # The id-extended dictionary is used to record a single record into the temporary database for forecast calculation
    custom_dict["ID"] = 0
    write_single_dict_to_db(custom_dict)

    return result_df


def draw_custom_df() -> None:
    """
    Displays the custom user inputs and predict results for him
    """
    st.divider()
    st.header('ü•Ö –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑')
    st.info('–ó–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–æ–ª—É—á–∏ –Ω–∞—à –ø—Ä–æ–≥–Ω–æ–∑ –æ –µ–≥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å —Å –ë–∞–Ω–∫–æ–º.')

    # collect and draw the dataframe in a separate function collect_dataframe
    result_df_regular = collect_dataframe()
    st.caption('–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞:')
    st.dataframe(result_df_regular)

    # calculate forecasts based on temp records in the database and draw them in the application
    draw_forecast()
